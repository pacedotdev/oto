// Code generated by oto; DO NOT EDIT.

package <%= def.PackageName %>

import (

	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"time"
	"io/ioutil"
	"net/http"

	"github.com/pkg/errors"
)

<%= for (service) in def.Services { %>
type <%= camelize_down(service.Name) %>Client struct {
	username string
	password string
	endpoint string
	cl      *http.Client
}

func New<%= service.Name %>Client(endpoint, username, password string, timeout time.Duration) <%= service.Name %> {
	return &<%= camelize_down(service.Name) %>Client{
		username: username,
		password: password,
		endpoint: endpoint,
		cl: &http.Client{Timeout: timeout},
	}
}

<%= for (method) in service.Methods { %>
func (c *<%= camelize_down(service.Name) %>Client) <%= method.Name %>(ctx context.Context, req <%= method.InputObject.TypeName %>) (*<%= method.OutputObject.TypeName %>, error) {
	body, err := json.Marshal(&req)
	if err != nil {
		return nil, errors.Wrap(err, "marshal")
	}
	request, err := http.NewRequestWithContext(
		ctx,
		"POST",
		fmt.Sprintf("%s/oto/<%= service.Name %>.<%= method.Name %>", c.endpoint),
		bytes.NewReader(body))
	if err != nil {
		return nil, errors.Wrap(err, "request")
	}
	if c.username != "" {
		request.SetBasicAuth(c.username, c.password)
	}
	request.Header.Set("Content-Type", "application/json")
	resp, err := c.cl.Do(request)
	if err != nil {
		return nil, errors.Wrap(err, "http")
	}
	defer resp.Body.Close()
	body, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "body")
	}
	if resp.StatusCode != 200 {
		if resp.StatusCode == 500 {
			return nil, errors.New(string(body))
		}
		return nil, fmt.Errorf("%d: %s", resp.StatusCode, string(body))
	}
	response := &<%= method.OutputObject.TypeName %>{}
	if err := json.Unmarshal(body, response); err != nil {
		return nil, errors.Wrap(err, "unmarshal")
	}
	return response, nil
}
<% } %>
<% } %>

<% } %>