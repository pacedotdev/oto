use std::io::Read;
use rocket::{Request, State, Data, Outcome::*};
use rocket::config::{Config, Environment};
use rocket::data::{FromDataSimple, Outcome};
use rocket::http::{ContentType, Status};
use rocket::response::{self, Responder, Response};
use rocket_contrib::json::Json;
use serde_json;
use std::io::Cursor;
use crate::types::*;

fn error_json(msg: &str) -> String {
    format!("{{\"error\":\"{}\"}}", msg)
}

#[post("/")]
fn index() -> &'static str {
    "It works!"
}

<%= for (service) in def.Services { %>



<%= for (method) in service.Unique { %>
    #[post("/<%= service.Name %>.<%= method.Name %>", format = "json", data = "<data>")]
    fn <%= underscore(service.Name) %>_<%= underscore(method.Name) %>(data: <%= method.InputObject.TypeName %>, svc: State<Box<dyn <%= service.Name %>>>) -> <%= method.OutputObject.TypeName %> {
        match svc.<%= underscore(method.Name) %>(data) {
            Ok(resp) => resp,
            Err(msg) => <%= method.OutputObject.TypeName %>::error(msg),
        }
    }
<% } %>



pub struct <%= service.Name %>Server {
    rocket: rocket::Rocket,
}

impl <%= service.Name %>Server {
    pub fn new(svc: Box<dyn <%= service.Name %>>) -> <%= service.Name %>Server {
        let config = Config::build(Environment::Staging)
            .address("0.0.0.0")
            .port(8000)
            .unwrap();
            //.register(catchers![bad_request])
        let rocket = rocket::custom(config)
            .mount("/", routes![index])
            .mount("/oto", routes![
                index,
                <%= for (method) in service.Unique { %>
                    <%= underscore(service.Name) %>_<%= underscore(method.Name) %>,
                <% } %>
                <%= for (embedded) in service.Embedded { %>
                <%= for (method) in embedded.Unique { %>
                    <%= underscore(embedded.Name) %>_<%= underscore(method.Name) %>,
                <% } %>
                <% } %>
            ])
            .manage(svc);
        <%= service.Name %>Server { rocket }
    }

    pub fn listen(self) -> rocket::error::LaunchError {
        self.rocket.launch()
    }
}

<% } %>

<%= for (object) in def.Objects { %>

impl FromDataSimple for <%= object.Name %> {
    type Error = String;


    fn from_data(req: &Request, data: Data) -> Outcome<Self, String> {
        let json_ct = ContentType::new("application", "json");
        if req.content_type() != Some(&json_ct) {
            return Outcome::Forward(data);
        }
        let mut body = String::new();
        if let Err(e) = data.open().read_to_string(&mut body) {
            return Failure((Status::InternalServerError, format!("{:?}", e)));
        }
        match serde_json::from_str::<<%= object.Name %>>(&body) {
            Ok(value) => Success(value),
            Err(e) => Failure((Status::BadRequest, format!("{:?}", e))),
        }
    }
}



<%= if (has(object, "Error")) { %>
impl<'a> Responder<'a> for <%= object.Name %> {
    fn respond_to(self, _: &Request) -> response::Result<'a> {
        let (status, body) = match self.is_error() {
            true => {
                (Status::InternalServerError, error_json(self.get_error().unwrap()))
            },
            false => {
                match serde_json::to_string(&self) {
                    Ok(body) => (Status::Ok, body),
                    Err(e) => {
                        let msg = format!("{}", &e);
                        (Status::InternalServerError, error_json(&msg))
                    },
                }
            },
        };
        Response::build()
            .header(ContentType::JSON)
            .status(status)
            .sized_body(Cursor::new(body))
            .ok()
    }
}
<% } %>
<% } %>

#[cfg(test)]
mod test {
    use super::*;
    use rocket::local::Client;

<%= for (service) in def.Services { %>
    <%= for (method) in service.Unique { %>
        #[test]
        fn test_<%= underscore(service.Name) %>_<%= underscore(method.Name) %>_ok() {
            let server = <%= service.Name %>Server::new(Box::new(Mock<%= service.Name %>::new()));
            let client = Client::new(server.rocket).expect("valid rocket instance");
            let req = <%= method.InputObject.TypeName %>::new();
            let body = serde_json::to_string(&req).unwrap();
            let response = client.post("/oto/<%= service.Name %>.<%= method.Name %>")
                .header(ContentType::JSON)
                .body(body)
                .dispatch();
            assert_eq!(response.status(), Status::Ok);
            assert_eq!(response.content_type(), Some(ContentType::JSON));
            //assert!(response.headers().get_one("X-Special").is_some());
            //assert_eq!(response.body_string(), Some("Expected Body".into()));
        }

        #[test]
        fn test_<%= underscore(service.Name) %>_<%= underscore(method.Name) %>_error() {
            let server = <%= service.Name %>Server::new(Box::new(Mock<%= service.Name %>::error("purple")));
            let client = Client::new(server.rocket).expect("valid rocket instance");
            let req = <%= method.InputObject.TypeName %>::new();
            let body = serde_json::to_string(&req).unwrap();
            let mut response = client.post("/oto/<%= service.Name %>.<%= method.Name %>")
                .header(ContentType::JSON)
                .body(body)
                .dispatch();
            assert_eq!(response.status(), Status::InternalServerError);
            assert_eq!(response.content_type(), Some(ContentType::JSON));
            assert_eq!(response.body_string(), Some("{\"error\":\"purple\"}".into()));
        }

        #[test]
        fn test_<%= underscore(service.Name) %>_<%= underscore(method.Name) %>_bad_request() {
            let server = <%= service.Name %>Server::new(Box::new(Mock<%= service.Name %>::error("purple")));
            let client = Client::new(server.rocket).expect("valid rocket instance");
            let mut response = client.post("/oto/<%= service.Name %>.<%= method.Name %>")
                .header(ContentType::JSON)
                .body(String::from("asdjfmmvzzi"))
                .dispatch();
            assert_eq!(response.status(), Status::BadRequest);
            //assert_eq!(response.status(), Status::InternalServerError);
            //assert_eq!(response.content_type(), Some(ContentType::JSON));
            //assert_eq!(response.body_string(), Some("{\"error\":\"purple\"}".into()));
        }
    <% } %>
<% } %>
}
