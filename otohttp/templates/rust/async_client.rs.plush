// Code generated by oto; DO NOT EDIT.
pub use crate::types::*;
use serde_json;
use reqwest;

#[derive(Error, Debug)]
pub enum Error {
    #[error("error: {0}")]
    MockError(String),
}

<%= for (service) in def.Services { %>
pub struct <%= service.Name %>AsyncClient<E: Send> {
    client: reqwest::Client,
    phantom: std::marker::PhantomData<E>,
    <%= for (method) in service.Methods { %>
    <%= underscore(method.Name) %>_endpoint: String,
    <% } %>
}

impl<E> <%= service.Name %>AsyncClient<E> where E: std::marker::Send + std::marker::Sync {
    pub fn new(endpoint: String) -> Self {
        <%= for (method) in service.Methods { %>
        let <%= underscore(method.Name) %>_endpoint = format!("{}/oto/<%= service.Name %>.<%= method.Name %>", &endpoint);
        <% } %>
        <%= service.Name %>AsyncClient{
            client: reqwest::Client::new(),
            phantom: std::marker::PhantomData,
            <%= for (method) in service.Methods { %>
            <%= underscore(method.Name) %>_endpoint,
            <% } %>
        }
    }
}

<%= for (embedded) in service.Embedded { %>
    #[async_trait]
    impl<E> <%= embedded.Name %><E> for <%= service.Name %>AsyncClient<E> where E: std::marker::Send + std::marker::Sync {
        <%= for (method) in embedded.Unique { %>
        async fn <%= underscore(method.Name) %>(&self, req: <%= method.InputObject.TypeName %>) -> Result<<%= method.OutputObject.TypeName %>, E> {
            Ok(<%= method.OutputObject.TypeName %>::new())
        }<% } %>
    }
<% } %>


#[async_trait]
impl<E> <%= service.Name %><E> for <%= service.Name %>AsyncClient<E> where E: std::marker::Send + std::marker::Sync {
    <%= for (method) in service.Unique { %>
    async fn <%= underscore(method.Name) %>(&self, req: <%= method.InputObject.TypeName %>) -> Result<<%= method.OutputObject.TypeName %>, E> {
        //let result: <%= method.OutputObject.TypeName %> = reqwest::Client::new()
        //    .post(self.<%= underscore(method.Name) %>_endpoint)
        //    .json(&req)
        //    .send()
        //    .await?
        //    .json()
        //    .await?;
        //return Ok(result);
        //let status = resp.status();
        //let text = match resp.text() {
        //    Ok(value) => value,
        //    Err(e) => return Err(format!("{:?}", e)),
        //};
        //let mut obj = match serde_json::from_str::<<%= method.OutputObject.TypeName %>>(&text) {
        //    Ok(value) => value,
        //    Err(e) => return Err(format!("{:?}", e)),
        //};
        //if status == 200 {
        //    Ok(obj)
        //} else {
        //    match obj.take_error() {
        //        Some(msg) => Err(msg),
        //        None => Err(format!("status code {}", status))
        //    }
        //}
        Ok(<%= method.OutputObject.TypeName %>::new())
    }
    <% } %>
}
<% } %>

