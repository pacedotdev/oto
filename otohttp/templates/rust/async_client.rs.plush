// Code generated by oto; DO NOT EDIT.
pub use crate::types::*;
use serde_json;
use reqwest;

<%= for (service) in def.Services { %>
pub struct <%= service.Name %>AsyncClient {
    client: reqwest::Client,
    <%= for (method) in service.Methods { %>
    <%= underscore(method.Name) %>_endpoint: String,
    <% } %>
}

impl <%= service.Name %>AsyncClient {
    pub fn new(endpoint: String) -> Self {
        <%= for (method) in service.Methods { %>
        let <%= underscore(method.Name) %>_endpoint = format!("{}/oto/<%= service.Name %>.<%= method.Name %>", &endpoint);
        <% } %>
        <%= service.Name %>AsyncClient{
            client: reqwest::Client::new(),
            <%= for (method) in service.Methods { %>
            <%= underscore(method.Name) %>_endpoint,
            <% } %>
        }
    }
}

<%= for (embedded) in service.Embedded { %>
    #[async_trait]
    impl <%= embedded.Name %> for <%= service.Name %>AsyncClient {
        <%= for (method) in embedded.Unique { %>
        async fn <%= underscore(method.Name) %>(&self, req: <%= method.InputObject.TypeName %>) -> Result<<%= method.OutputObject.TypeName %>, String> {
            match self.client
                .post(&self.<%= underscore(method.Name) %>_endpoint)
                .json(&req)
                .send()
                .await
            {
                Ok(resp) => {
                    let status = resp.status();
                    match resp.json().await {
                        Ok(mut result) => match status {
                            reqwest::StatusCode::OK => Ok(result),
                            _ => match result.take_error() {
                                Some(msg) => Err(msg),
                                None => Err(format!("status code {}", status))
                            }
                        },
                        Err(e) => Err(format!("{:?}", e))
                    }
                },
                Err(e) => Err(format!("{:?}", e))
            }
        }<% } %>
    }
<% } %>


#[async_trait]
impl <%= service.Name %> for <%= service.Name %>AsyncClient {
    <%= for (method) in service.Unique { %>
    async fn <%= underscore(method.Name) %>(&self, req: <%= method.InputObject.TypeName %>) -> Result<<%= method.OutputObject.TypeName %>, String> {
        match self.client
            .post(&self.<%= underscore(method.Name) %>_endpoint)
            .json(&req)
            .send()
            .await
        {
            Ok(resp) => {
                let status = resp.status();
                match resp.json().await {
                    Ok(mut result) => match status {
                        reqwest::StatusCode::OK => Ok(result),
                        _ => match result.take_error() {
                            Some(msg) => Err(msg),
                            None => Err(format!("status code {}", status))
                        }
                    },
                    Err(e) => Err(format!("{:?}", e))
                }
            },
            Err(e) => Err(format!("{:?}", e))
        }
    }
    <% } %>
}
<% } %>

