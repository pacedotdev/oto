// Code generated by oto; DO NOT EDIT.

use serde_json::{Value, Map};


<%= for (service) in def.Services { %>

    

pub trait <%= service.Name %>: Send + Sync
<%= if (len(service.Embedded) > 0) { %> 
    <%= for (i, embedded) in service.Embedded { %>
        + <%= embedded.Name %>
    <% } %>
<% } %>
{

    <%= for (method) in service.Unique { %>
	fn <%= underscore(method.Name) %>(&self, req: <%= method.InputObject.TypeName %>) -> Result<<%= method.OutputObject.TypeName %>, String>;<% } %>
}
<% } %>

<%= for (object) in def.Objects { %>
#[derive(Serialize, Deserialize)]
pub struct <%= object.Name %> {<%= for (field) in object.Fields { %>
    <%= if (field.Name != "Error") { %>pub<% } %>
    <%= underscore(field.Name) %>:
    <%= if (field.OmitEmpty) { %> Option< <% } %>
        <%= if (field.Type.Multiple) { %> Vec< <% } %>
            <%= rust_type(field.Type.TypeName) %>
        <%= if (field.Type.Multiple) { %> > <% } %>
    <%= if (field.OmitEmpty) { %> > <% } %>,
<% } %>}

impl <%= object.Name %> {
    pub fn new() -> Self {
        <%= object.Name %>{
            <%= for (field) in object.Fields { %>
                <%= underscore(field.Name) %>:
                <%= if (field.OmitEmpty) { %>
                    None
                <% } else { %>
                    Default::default()
                <% } %>,
            <% } %>
        }
    }
    
    pub fn make(
        <%= for (field) in object.Fields { %>
            <%= if (field.Name != "Error") { %>
            <%= underscore(field.Name) %>:
            <%= if (field.OmitEmpty) { %> Option< <% } %>
                <%= if (field.Type.Multiple) { %> Vec< <% } %>
                    <%= rust_type(field.Type.TypeName) %>
                <%= if (field.Type.Multiple) { %> > <% } %>
            <%= if (field.OmitEmpty) { %> > <% } %>,
            <% } %>
        <% } %>
    ) -> Self {
        <%= object.Name %>{
            <%= for (field) in object.Fields { %>
                <%= if (field.Name != "Error") { %>
                    <%= underscore(field.Name) %>,
                <% } %>
            <% } %>
            <%= if (has(object, "Error")) { %>
                error: None,
            <% } %>
        }
    }

    <%= if (has(object, "Error")) { %>
    pub fn error(msg: String) -> Self {
        <%= object.Name %>{
            error: Some(msg),
            <%= for (field) in object.Fields { %>
                <%= if (field.Name != "Error") { %>
                    <%= underscore(field.Name) %>:
                    <%= if (field.OmitEmpty) { %>
                        None
                    <% } else { %>
                        Default::default()
                    <% } %>,
                <% } %>
            <% } %>
        }
    }

    pub(crate) fn is_error(&self) -> bool {
        self.error != None
    }
    
    pub(crate) fn get_error(&self) -> Option<&String> {
        self.error.as_ref()
    }

    pub(crate) fn take_error(&mut self) -> Option<String> {
        self.error.take()
    }
    <% } %>
}

impl Default for <%= object.Name %> {
    fn default() -> <%= object.Name %> {
        <%= object.Name %>::new()
    }
}

<% } %>

pub mod mock {
    use super::*;

<%= for (service) in def.Services { %>

pub struct Mock<%= service.Name %> {
    error: Option<&'static str>,
}

impl Mock<%= service.Name %> {
    pub fn new() -> Mock<%= service.Name %> {
        Mock<%= service.Name %> { error: None }
    }

    pub fn error(message: &'static str) -> Mock<%= service.Name %> {
        Mock<%= service.Name %>{ error: Some(message) }
    }
}

<%= for (embedded) in service.Embedded { %>
    impl <%= embedded.Name %> for Mock<%= service.Name %> {
        <%= for (method) in embedded.Unique { %>
            fn <%= underscore(method.Name) %>(&self, _ :<%= method.InputObject.TypeName %>) -> Result<<%= method.OutputObject.TypeName %>, String> {
                match self.error {
                    Some(msg) => Err(String::from(msg)),
                    None => Ok(Default::default()),
                }
            }
        <% } %>
    }
<% } %>

impl <%= service.Name %> for Mock<%= service.Name %> {
    <%= for (method) in service.Unique { %>
        fn <%= underscore(method.Name) %>(&self, _ :<%= method.InputObject.TypeName %>) -> Result<<%= method.OutputObject.TypeName %>, String> {
            match self.error {
                Some(msg) => Err(String::from(msg)),
                None => Ok(Default::default()),
            }
        }
    <% } %>
}
<% } %>
}

#[cfg(test)]
mod test {
    use super::*;
    use super::mock::*;
    
<%= for (service) in def.Services { %>
mod <%= underscore(service.Name) %> {
    use super::*;

    <%= for (method) in service.Unique { %>
        #[test]
        fn test_<%= underscore(method.Name) %>_ok() {
            assert!(Mock<%= service.Name %>::new().<%= underscore(method.Name) %>(Default::default()).is_ok());
        }

        #[test]
        #[should_panic]
        fn test_<%= underscore(method.Name) %>_error() {
            Mock<%= service.Name %>::error("quaranstream")
                .<%= underscore(method.Name) %>(Default::default())
                .expect("should panic because its an error");
        }
    <% } %>

    <%= for (embedded) in service.Embedded { %>
    mod <%= underscore(embedded.Name) %> {
        use super::*;

        <%= for (method) in embedded.Unique { %>
            #[test]
            fn test_<%= underscore(method.Name) %>_ok() {
                assert!(Mock<%= service.Name %>::new().<%= underscore(method.Name) %>(Default::default()).is_ok());
            }

            #[test]
            #[should_panic]
            fn test_<%= underscore(method.Name) %>_error() {
                Mock<%= service.Name %>::error("quaranstream")
                    .<%= underscore(method.Name) %>(Default::default())
                    .expect("should panic because its an error");
            }
        <% } %>
    }
    <% } %>
}
<% } %>
}