// Code generated by oto; DO NOT EDIT.

<%= for (service) in def.Services { %>

    

pub trait <%= service.Name %>: Send + Sync
<%= if (len(service.Embedded) > 0) { %> 
    <%= for (i, embedded) in service.Embedded { %>
        + <%= embedded.Name %>
    <% } %>
<% } %>
{

    <%= for (method) in service.Unique { %>
	fn <%= underscore(method.Name) %>(&self, req: <%= method.InputObject.TypeName %>) -> Result<<%= method.OutputObject.TypeName %>, String>;<% } %>
}
<% } %>

<%= for (object) in def.Objects { %>
#[derive(Serialize, Deserialize)]
pub struct <%= object.Name %> {<%= for (field) in object.Fields { %>
    <%= if (field.Name != "Error") { %>pub<% } %>
    <%= underscore(field.Name) %>:
    <%= if (field.OmitEmpty) { %> Option< <% } %>
        <%= rust_type(field.Type.TypeName) %>
    <%= if (field.OmitEmpty) { %> > <% } %>,
<% } %>}

impl <%= object.Name %> {
    pub fn new() -> <%= object.Name %> {
        <%= object.Name %>{
            <%= for (field) in object.Fields { %>
                <%= underscore(field.Name) %>:
                <%= if (field.OmitEmpty) { %>
                    None
                <% } else { %>
                    Default::default()
                <% } %>,
            <% } %>
        }
    }

    <%= if (has(object, "Error")) { %>
    pub(crate) fn is_error(&self) -> bool {
        self.error != None
    }
    pub(crate) fn take_error(&mut self) -> Option<String> {
        self.error.take()
    }
    <% } %>
    
    pub fn make(
        <%= for (field) in object.Fields { %>
            <%= if (field.Name != "Error") { %>
                <%= underscore(field.Name) %>:
                <%= if (field.OmitEmpty) { %> Option< <% } %>
                <%= rust_type(field.Type.TypeName) %>
                <%= if (field.OmitEmpty) { %> > <% } %>,
            <% } else {%>
            <% } %>
        <% } %>
    ) -> <%= object.Name %> {
        <%= object.Name %>{
            <%= for (field) in object.Fields { %>
                <%= if (field.Name != "Error") { %>
                    <%= underscore(field.Name) %>,
                <% } %>
            <% } %>
            <%= if (has(object, "Error")) { %>
                error: None,
            <% } %>
        }
    }

    <%= if (has(object, "Error")) { %>
    pub fn error(msg: String) -> <%= object.Name %> {
        <%= object.Name %>{
            error: Some(msg),
            <%= for (field) in object.Fields { %>
                <%= if (field.Name != "Error") { %>
                    <%= underscore(field.Name) %>:
                    <%= if (field.OmitEmpty) { %>
                        None
                    <% } else { %>
                        Default::default()
                    <% } %>,
                <% } %>
            <% } %>
        }
    }
    <% } %>
}

impl Default for <%= object.Name %> {
    fn default() -> <%= object.Name %> {
        <%= object.Name %>::new()
    }
}

<% } %>
