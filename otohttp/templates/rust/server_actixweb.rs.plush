use actix_web;
use crate::types;
use futures;

fn error_json<T: std::string::ToString>(e: T) -> String {
    format!("{{\"error\":\"{}\"}}", e.to_string())
}

<%= for (service) in def.Services { %>



pub mod <%= underscore(service.Name) %> {
    use super::*;

    pub fn routes<T>(cfg: &mut actix_web::web::ServiceConfig) where T: types::<%= service.Name %> + std::clone::Clone + 'static {
        cfg
            <%= for (method) in service.Unique { %>
                .service(actix_web::web::resource("/oto/<%= service.Name %>.<%= method.Name %>").to(<%= underscore(method.Name) %>::<T>))
            <% } %>
            <%= for (embedded) in service.Embedded { %>
            <%= for (method) in embedded.Unique { %>
                .service(actix_web::web::resource("/oto/<%= service.Name %>.<%= method.Name %>").to(<%= underscore(embedded.Name) %>::<%= underscore(method.Name) %>::<T>))
                .service(actix_web::web::resource("/oto/<%= embedded.Name %>.<%= method.Name %>").to(<%= underscore(embedded.Name) %>::<%= underscore(method.Name) %>::<T>))
            <% } %>
            <% } %>;
    }

    // address: e.g. "127.0.0.1:8080"
    pub async fn main<T>(svc: T, address: &str) -> std::io::Result<()> where T: types::<%= service.Name %> + std::clone::Clone + 'static {
        actix_web::HttpServer::new(move || actix_web::App::new()
            .data(svc.clone())
            .configure(routes::<T>)
        )
            .bind(address)?
            .run()
            .await
    }

<%= for (method) in service.Unique { %>
    pub async fn <%= underscore(method.Name) %><'a, T>(svc: actix_web::web::Data<T>, req: actix_web::web::Json<types::<%= method.InputObject.TypeName %>>) -> impl actix_web::Responder where T: types::<%= service.Name %> + 'a {
        let (status, body) = match svc.<%= underscore(method.Name) %>(req.into_inner()).await {
            Ok(res) => match serde_json::to_string(&res) {
                Ok(body) => (actix_web::http::StatusCode::OK, body),
                Err(e) => (actix_web::http::StatusCode::INTERNAL_SERVER_ERROR, error_json(format!("error serializing response: {:?}", e))),
            },
            Err(e) => (actix_web::http::StatusCode::INTERNAL_SERVER_ERROR, error_json(e)),
        };
        actix_web::web::HttpResponse::build(status)
            .content_type("application/json")
            .body(body)
    }
<% } %>

}
<% } %>

#[cfg(test)]
mod tests {
<%= for (service) in def.Services { %>
    mod <%= underscore(service.Name) %> {
        use super::super::*;
        use actix_web::test;

        async fn index() -> impl actix_web::Responder {
            String::from("Hello, world!")
        }


        <%= for (method) in service.Unique { %>
            #[actix_rt::test]
            async fn <%= underscore(method.Name) %>_ok() {
                let endpoint = "/oto/<%= service.Name %>.<%= method.Name %>";
                let body = types::<%= method.InputObject.TypeName %>::new();
                let req = test::TestRequest::post()
                    .uri(endpoint)
                    .set_json(&body)
                    .to_request();
                let svc = types::mock::Mock<%= service.Name %>::new();
                let mut app = test::init_service(actix_web::App::new()
                    .data(svc.clone())
                    .configure(super::super::<%= underscore(service.Name) %>::routes::<types::mock::Mock<%= service.Name %>>)
                ).await;
                let resp = test::call_service(&mut app, req).await;
                assert_eq!(resp.status(), actix_web::http::StatusCode::OK);
                let result = test::read_body(resp).await;
                let obj = types::<%= method.OutputObject.TypeName %>::new();
                let expected = serde_json::to_string(&obj).unwrap();
                assert_eq!(result, expected);
            }

            #[actix_rt::test]
            async fn <%= underscore(method.Name) %>_error() {
                let endpoint = "/oto/<%= service.Name %>.<%= method.Name %>";
                let body = types::<%= method.InputObject.TypeName %>::new();
                let req = test::TestRequest::post()
                    .uri(endpoint)
                    .set_json(&body)
                    .to_request();
                let svc = types::mock::Mock<%= service.Name %>::error("Hello from <%= service.Name %>.<%= method.Name %>!");
                let mut app = test::init_service(actix_web::App::new()
                    .data(svc.clone())
                    .configure(super::super::<%= underscore(service.Name) %>::routes::<types::mock::Mock<%= service.Name %>>)
                ).await;
                let resp = test::call_service(&mut app, req).await;
                assert_eq!(resp.status(), actix_web::http::StatusCode::INTERNAL_SERVER_ERROR);
                let result = test::read_body(resp).await;
                let expected = error_json("Hello from <%= service.Name %>.<%= method.Name %>!");
                assert_eq!(result, expected);
            }
        <% } %>

        <%= for (embedded) in service.Embedded { %>
        <%= for (method) in embedded.Unique { %>
            #[actix_rt::test]
            async fn <%= underscore(method.Name) %>_ok() {
                let <%= underscore(service.Name) %>_endpoint = "/oto/<%= service.Name %>.<%= method.Name %>";
                let <%= underscore(embedded.Name) %>_endpoint = "/oto/<%= embedded.Name %>.<%= method.Name %>";
                let body = types::<%= method.InputObject.TypeName %>::new();
                let svc = types::mock::Mock<%= service.Name %>::new();
                let mut app = test::init_service(actix_web::App::new()
                    .data(svc.clone())
                    .configure(super::super::<%= underscore(service.Name) %>::routes::<types::mock::Mock<%= service.Name %>>)
                ).await;
                {
                    // Test the endpoint mounted at /oto/<%= service.Name %>.<%= method.Name %>
                    let req = test::TestRequest::post()
                        .uri(<%= underscore(service.Name) %>_endpoint)
                        .set_json(&body)
                        .to_request();
                    let resp = test::call_service(&mut app, req).await;
                    assert_eq!(resp.status(), actix_web::http::StatusCode::OK);
                    let result = test::read_body(resp).await;
                    let obj = types::<%= method.OutputObject.TypeName %>::new();
                    let expected = serde_json::to_string(&obj).unwrap();
                    assert_eq!(result, expected);
                }
                {
                    // Test the endpoint mounted at /oto/<%= embedded.Name %>.<%= method.Name %>
                    let req = test::TestRequest::post()
                        .uri(<%= underscore(embedded.Name) %>_endpoint)
                        .set_json(&body)
                        .to_request();
                    let resp = test::call_service(&mut app, req).await;
                    assert_eq!(resp.status(), actix_web::http::StatusCode::OK);
                    let result = test::read_body(resp).await;
                    let obj = types::<%= method.OutputObject.TypeName %>::new();
                    let expected = serde_json::to_string(&obj).unwrap();
                    assert_eq!(result, expected);
                }
            }

            #[actix_rt::test]
            async fn <%= underscore(method.Name) %>_error() {
                let <%= underscore(service.Name) %>_endpoint = "/oto/<%= service.Name %>.<%= method.Name %>";
                let <%= underscore(embedded.Name) %>_endpoint = "/oto/<%= embedded.Name %>.<%= method.Name %>";
                let body = types::<%= method.InputObject.TypeName %>::new();
                let svc = types::mock::Mock<%= service.Name %>::error("Hello from <%= method.Name %>!");
                let mut app = test::init_service(actix_web::App::new()
                    .data(svc.clone())
                    .configure(super::super::<%= underscore(service.Name) %>::routes::<types::mock::Mock<%= service.Name %>>)
                ).await;
                {
                    // Test the endpoint mounted at /oto/<%= service.Name %>.<%= method.Name %>
                    let req = test::TestRequest::post()
                        .uri(<%= underscore(service.Name) %>_endpoint)
                        .set_json(&body)
                        .to_request();
                    let resp = test::call_service(&mut app, req).await;
                    assert_eq!(resp.status(), actix_web::http::StatusCode::INTERNAL_SERVER_ERROR);
                    let result = test::read_body(resp).await;
                    // Should return embedded message about type
                    let expected = error_json("Hello from <%= method.Name %>!");
                    assert_eq!(result, expected);
                }
                {
                    // Test the endpoint mounted at /oto/<%= embedded.Name %>.<%= method.Name %>
                    let req = test::TestRequest::post()
                        .uri(<%= underscore(embedded.Name) %>_endpoint)
                        .set_json(&body)
                        .to_request();
                    let resp = test::call_service(&mut app, req).await;
                    assert_eq!(resp.status(), actix_web::http::StatusCode::INTERNAL_SERVER_ERROR);
                    let result = test::read_body(resp).await;
                    let expected = error_json("Hello from <%= method.Name %>!");
                    assert_eq!(result, expected);
                }
            }
        <% } %>
        <% } %>
    }
<% } %>

}
