use actix_web::{http::StatusCode, get, web, App, HttpServer, Responder};
use crate::types;

#[derive(Error, Debug)]
pub enum Error {
    #[error("error: {0}")]
    MockError(String),
}

fn error_json<T: std::string::ToString>(e: T) -> String {
    format!("{{\"error\":\"{}\"}}", e.to_string())
}


<%= for (service) in def.Services { %>



<%= for (method) in service.Unique { %>
    async fn <%= underscore(service.Name) %>_<%= underscore(method.Name) %>(svc: web::Data<Box<types::<%= service.Name %>>>, req: web::Json<types::<%= method.InputObject.TypeName %>>) -> web::HttpResponse {
        let (status, body) = match svc.<%= underscore(method.Name) %>(req.into_inner()).await {
            Ok(res) => match serde_json::to_string(&res) {
                Ok(body) => (StatusCode::OK, body),
                Err(e) => (StatusCode::INTERNAL_SERVER_ERROR, error_json(e)),
            },
            Err(e) => (StatusCode::INTERNAL_SERVER_ERROR, error_json(e)),
        };
        web::HttpResponse::build(status)
            .content_type("application/json")
            .body(body)
    }
<% } %>

<% } %>
