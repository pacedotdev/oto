// Code generated by oto; DO NOT EDIT.
pub use crate::types::*;
use reqwest;

<%= for (service) in def.Services { %>
pub struct <%= service.Name %>Client {
    client: reqwest::blocking::Client,
    <%= for (method) in service.Methods { %>
    <%= underscore(method.Name) %>_endpoint: String,
    <% } %>
}

impl <%= service.Name %>Client {
    pub fn new(endpoint: String) -> <%= service.Name %>Client {

        <%= for (method) in service.Methods { %>
        let <%= underscore(method.Name) %>_endpoint = format!("{}/oto/<%= service.Name %>.<%= method.Name %>", &endpoint);
        <% } %>
        <%= service.Name %>Client{
            client: reqwest::blocking::Client::new(),
            <%= for (method) in service.Methods { %>
            <%= underscore(method.Name) %>_endpoint,
            <% } %>
        }
    }
}

<%= for (embedded) in service.Embedded { %>
    impl <%= embedded.Name %> for <%= service.Name %>Client {
        <%= for (method) in embedded.Unique { %>
        fn <%= underscore(method.Name) %>(&self, req: <%= method.InputObject.TypeName %>) -> Result<<%= method.OutputObject.TypeName %>, ()> {
            Ok(<%= method.OutputObject.TypeName %>::new())
        }<% } %>
    }
<% } %>

impl <%= service.Name %> for <%= service.Name %>Client {

    <%= for (method) in service.Unique { %>
	fn <%= underscore(method.Name) %>(&self, req: <%= method.InputObject.TypeName %>) -> Result<<%= method.OutputObject.TypeName %>, ()> {
        let body = match serde_json::to_string(&req) {
            Ok(body) => body,
            Err(e) => return Err(()),
        };
        let resp: Result<reqwest::blocking::Response, reqwest::Error> = self.client
            .post(&self.<%= underscore(method.Name) %>_endpoint)
            .body(reqwest::blocking::Body::from(body))
            .send();
        let text = match resp {
            Ok(res) => {
                if res.status() != 200 {
                    return Err(());
                }
                match res.text() {
                    Ok(text) => text,
                    Err(e) => return Err(()),
                }
            },
            Err(e) => return Err(()),
        };
        match serde_json::from_str::<<%= method.OutputObject.TypeName %>>(&text) {
            Ok(value) => Ok(value),
            Err(e) => Err(()),
        }
    }<% } %>
}
<% } %>

